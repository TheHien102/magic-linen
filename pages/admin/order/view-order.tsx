import {
  Table,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  TableBody,
  Box,
  TablePagination,
  Typography,
  Button,
} from '@mui/material';
import { GetServerSidePropsContext } from 'next';
import Head from 'next/head';
import Image from 'next/image';
import React, { useEffect, useState } from 'react';
import Layout from '../../../components/Admin/LayoutAdmin/LayoutAdmin';
import SearchBar from '../../../components/Global/SearchBar/SearchBar';
import { OrderApi } from '../../../services/api/order';
import { getCookie } from '../../../services/cookies';
import { OrderListParams, ProductDetail } from '../../../services/types';
import CheckCircleIcon from '@mui/icons-material/CheckCircle';
import DoDisturbOnIcon from '@mui/icons-material/DoDisturbOn';

interface ViewOrderProps {
  orderList: ProductDetail[];
}

// const orderListData = [
//   {
//     id: 0,
//     productId: 0,
//     variants: [
//       {
//         id: 0,
//         name: 'Size',
//         property: 'L',
//         addPrice: 0,
//       },
//       {
//         id: 0,
//         name: 'Color',
//         property: 'red',
//         addPrice: 0,
//       },
//     ],
//     quantity: 0,
//     price: 0,
//     discount: 0,
//     name: 'string',
//     mainImg: 'string',
//     createdDate: '2022-12-11',
//     modifiedDate: '2022-12-11',
//   },
//   {
//     id: 0,
//     productId: 0,
//     variants: [
//       {
//         id: 0,
//         name: 'Size',
//         property: 'M',
//         addPrice: 0,
//       },
//     ],
//     quantity: 0,
//     price: 0,
//     discount: 0,
//     name: 'string',
//     mainImg: 'string',
//     createdDate: '2022-12-11',
//     modifiedDate: '2022-12-11',
//   },
// ];

const ViewOrder = () => {
  const [page, setPage] = useState(0);
  const [search, setSearch] = useState('');
  const [orderList, setOrderList] = useState<ProductDetail[]>();
  const [params, setParams] = useState<OrderListParams>({
    page: 0,
    size: 1,
    sort: [],
  });

  const handleChangePage = (event: unknown, newPage: number) => {
    setPage(newPage);
  };

  const getData = async () => {
    try {
      const token = getCookie('token');
      const res = await OrderApi.orderList(token as string, params);

      if (res && res.data && res.data.totalElements) {
        console.log(res);

        setOrderList(res.data.data);
      } else {
        console.log('No data');
      }
    } catch (error) {
      console.log(error);
    }
  };

  const paginationChange = () => {};

  useEffect(() => {
    getData();
  }, [search]);
  return (
    <>
      <Head>
        <title>View Order | Linen A</title>
        <meta name='description' content='Generated by create next app' />
      </Head>
      <Layout>
        {orderList && orderList.length ? (
          <Box>
            {/* <SearchBar value={search} setValue={setSearch} /> */}
            <Typography sx={{ mb: 3, fontWeight: 'bold' }}>
              List Order
            </Typography>
            <TableContainer component={Paper}>
              <Table
                sx={{ minWidth: 650 }}
                size='small'
                aria-label='a dense table'
              >
                <TableHead>
                  <TableRow>
                    <TableCell align='center'>ID</TableCell>
                    <TableCell align='center'>Product ID</TableCell>
                    {/* <TableCell align='center'>Variants</TableCell> */}
                    <TableCell align='center'>Quantity</TableCell>
                    <TableCell align='center'>Price</TableCell>
                    <TableCell align='center'>Discount</TableCell>
                    <TableCell align='center'>Name</TableCell>
                    <TableCell align='center'>Main Image</TableCell>
                    <TableCell align='center'>Created Date</TableCell>
                    <TableCell align='center'>Modified Date</TableCell>
                    <TableCell></TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {orderList.map((row, rowId) => (
                    <TableRow
                      key={rowId}
                      sx={{ '&:last-child td, &:last-child th': { border: 0 } }}
                    >
                      <TableCell component='th' scope='row' align='center'>
                        {row.id}
                      </TableCell>
                      <TableCell align='center'>{row.productId}</TableCell>
                      {/* <TableCell style={{ width: '1px', whiteSpace: 'nowrap' }}>
                        {row.variants.map((it, id) => (
                          <Box
                            key={id}
                            sx={{ textAlign: 'left' }}
                          >{`${it.name}: ${it.property}`}</Box>
                        ))}
                      </TableCell> */}
                      <TableCell align='center'>{row.quantity}</TableCell>
                      <TableCell align='center'>{row.price}</TableCell>
                      <TableCell align='center'>{row.discount}</TableCell>
                      <TableCell align='center'>{row.name}</TableCell>
                      <TableCell align='center'>
                        <Image
                          src={row.mainImg}
                          height={100}
                          width={75}
                          objectFit='contain'
                        ></Image>
                      </TableCell>
                      <TableCell align='center'>{row.createdDate}</TableCell>
                      <TableCell align='center'>{row.modifiedDate}</TableCell>
                      <TableCell align='right'>
                        <TableCell align={'right'}>
                          <Button
                            variant='contained'
                            // onClick={() => handleEdit(row.id)}
                          >
                            <CheckCircleIcon />
                          </Button>
                          <Button
                            variant='contained'
                            color={'error'}
                            sx={{ ml: 1 }}
                          >
                            <DoDisturbOnIcon />
                          </Button>
                        </TableCell>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
            <TablePagination
              rowsPerPageOptions={[]}
              component='div'
              count={orderList.length}
              rowsPerPage={15}
              page={page}
              onPageChange={handleChangePage}
            />
          </Box>
        ) : (
          <Box>No data</Box>
        )}
      </Layout>
    </>
  );
};

export async function getServerSideProps(ctx: GetServerSidePropsContext) {
  const token = getCookie('token', ctx);

  if (!token) {
    return {
      redirect: {
        permanent: false,
        destination: '/admin',
      },
    };
  }

  return {
    props: {},
  };
}

export default ViewOrder;
