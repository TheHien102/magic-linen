import { LockOutlined } from '@mui/icons-material';
import {
  Avatar,
  Box,
  Button,
  Checkbox,
  FormControlLabel,
  Grid,
  MenuItem,
  Paper,
  Select,
  TextField,
  Typography,
} from '@mui/material';
import Head from 'next/head';
import { useRouter } from 'next/router';
// import styles from '../../../styles/Home.module.css';
import { useFormik } from 'formik';
import * as yup from 'yup';
import Layout from '../../../components/Admin/LayoutAdmin/LayoutAdmin';
import OutlinedInput from '@mui/material/OutlinedInput';
import InputLabel from '@mui/material/InputLabel';
import FormControl from '@mui/material/FormControl';
import ListItemText from '@mui/material/ListItemText';
import { SelectChangeEvent } from '@mui/material/Select';
import { SetStateAction, useEffect, useRef, useState } from 'react';
import { ProductApi } from '../../../services/api/product';
import { getCookie } from '../../../services/cookies';
import ModalImage from '../../../components/Admin/Products/ModalImage';
import Image from 'next/image';
import { Editor } from '@tinymce/tinymce-react';
import CloseIcon from '@mui/icons-material/Close';

const validationSchema = yup.object({
  name: yup.string().required('Name is required'),
  mainImg: yup.string().required('Main image is required'),
  discount: yup.string(),
  description: yup.string().required('Description is required'),
  price: yup.string().required('Price is required'),
  productCategoryID: yup.number(),
  variants: yup.array(
    yup.object({
      name: yup.string(),
      property: yup.string(),
      addPrice: yup.number(),
    })
  ),
  assets: yup.array(
    yup.object({
      type: yup.string(),
      data: yup.string(),
      isMain: yup.number(),
    })
  ),
});

const ITEM_HEIGHT = 48;
const ITEM_PADDING_TOP = 8;
const MenuProps = {
  PaperProps: {
    style: {
      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,
      width: 250,
    },
  },
};

const names = ['S', 'M', 'L', 'XL', 'XXL'];

export default function AddProduct() {
  const router = useRouter();
  const formik = useFormik({
    initialValues: {
      name: '',
      mainImg: '',
      discount: '',
      description: '',
      price: '',
      productCategoryID: 0,
      variants: [],
      assets: [],
    },
    validationSchema: validationSchema,
    onSubmit: async (values) => {
      //   router.push('/dashboard');
      const token = getCookie('token');

      console.log(' values: ', values);

      try {
        const res = await ProductApi.addProduct(token as string, values);
        console.log('success: ', res);
        // console.log(' values: ', values);
      } catch (error) {
        console.log('error: ', error);
      }
    },
  });
  const [age, setAge] = useState(0);

  const handleChangeType = (e: {
    target: { value: SetStateAction<number> };
  }) => {
    // let typeValue = event.target.value;
    setAge(e.target.value);
    let id = Number(e.target.value);
    formik.values.productCategoryID = id;
  };

  const [size, setSize] = useState<string[]>([]);

  const handleChangeSize = (event: SelectChangeEvent<typeof size>) => {
    const {
      target: { value },
    } = event;
    setSize(typeof value === 'string' ? value.split(',') : value);
    let data = {
      name: 'size',
      property: value.at(value.length - 1),
      addPrice: 0,
    };
    formik.values.variants.push(data);
  };

  //Show Image
  const [arrayImage, setArrayImage] = useState([]);
  const [mainImage, setMainImage] = useState(formik.values.mainImg);
  const editorRef = useRef(null);

  useEffect(() => {
    if (mainImage.length != 0) {
      fetch(mainImage[mainImage.length - 1])
        .then((res) => res.blob())
        .then((blob) => {
          const file = new File([blob], 'dot.png', blob);
          const reader = new FileReader();
          reader.readAsDataURL(file);
          reader.onloadend = () => {
            formik.values.mainImg = reader.result as any;
          };
        });
    }

    if (arrayImage.length != 0) {
      fetch(arrayImage[arrayImage.length - 1])
        .then((res) => res.blob())
        .then((blob) => {
          const file = new File([blob], 'dot.png', blob);
          const reader = new FileReader();
          reader.readAsDataURL(file);
          reader.onloadend = () => {
            let data = {
              type: 'image',
              data: reader.result,
            };
            formik.values.assets.push(data);
          };
        });
    }
  }, [mainImage, arrayImage]);

  const log = () => {
    if (editorRef.current) {
      formik.values.description = editorRef.current.getContent();
    }
  };

  return (
    <div>
      <Head>
        <title>Add Product</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <Layout>
        <Grid>
          <Paper elevation={10}>
            <form onSubmit={formik.handleSubmit}>
              <Grid
                display={'flex'}
                flexDirection={'column'}
                justifyContent={'center'}
                alignItems={'center'}
                sx={{ position: 'relative' }}
              >
                <h2>Add product</h2>
                <Button
                  type='submit'
                  color='primary'
                  variant='contained'
                  sx={{
                    position: 'absolute',
                    right: 0,
                    top: '20px',
                    fontWeight: 'bold',
                  }}
                >
                  Add Product
                </Button>
              </Grid>

              <Box
                sx={{ display: 'flex', gap: '20px', alignItems: 'flex-start' }}
              >
                <Box
                  sx={{
                    border: '2px solid gray',
                    width: 300,
                    height: 350,
                    display: 'flex',
                    justifyContent: 'center',
                    alignItems: 'center',
                  }}
                >
                  {mainImage ? (
                    <Box sx={{ p: 2.5, position: 'relative' }}>
                      <Box
                        sx={{
                          position: 'absolute',
                          top: 0,
                          right: 0,
                          cursor: 'pointer',
                        }}
                        onClick={() => setMainImage('')}
                      >
                        <CloseIcon />
                      </Box>
                      <Image
                        src={mainImage[0]}
                        alt={'main image'}
                        width={300}
                        height={440}
                      />
                    </Box>
                  ) : (
                    <ModalImage
                      mainImage={mainImage}
                      setArrayImage={setMainImage}
                    />
                  )}
                </Box>
                <Grid container sx={{ marginTop: '5px' }} spacing={3.5}>
                  <Grid item xs={12} md={6}>
                    <TextField
                      label='Name'
                      fullWidth
                      id='name'
                      name='name'
                      size='small'
                      value={formik.values.name}
                      onChange={formik.handleChange}
                      error={formik.touched.name && Boolean(formik.errors.name)}
                      helperText={formik.touched.name && formik.errors.name}
                      FormHelperTextProps={{
                        style: { position: 'absolute', bottom: '-25px' },
                      }}
                    />
                  </Grid>

                  <Grid item xs={12} md={3}>
                    <TextField
                      label='Price'
                      fullWidth
                      id='price'
                      size='small'
                      name='price'
                      value={formik.values.price}
                      onChange={formik.handleChange}
                      error={
                        formik.touched.price && Boolean(formik.errors.price)
                      }
                      helperText={formik.touched.price && formik.errors.price}
                      FormHelperTextProps={{
                        style: { position: 'absolute', bottom: '-25px' },
                      }}
                    />
                  </Grid>
                  <Grid item xs={12} md={3}>
                    <TextField
                      type={'number'}
                      fullWidth
                      id='discount'
                      size='small'
                      name='discount'
                      label='Discount'
                      value={formik.values.discount}
                      onChange={formik.handleChange}
                      error={
                        formik.touched.discount &&
                        Boolean(formik.errors.discount)
                      }
                    />
                  </Grid>
                  <Grid item xs={12} md={6}>
                    <FormControl fullWidth size='small'>
                      <InputLabel id='productCategoryID'>Type</InputLabel>
                      <Select
                        labelId='productCategoryID'
                        id='productCategoryID'
                        value={age}
                        label='Type'
                        sx={{ color: 'black' }}
                        onChange={(e: any) => handleChangeType(e)}
                      >
                        <MenuItem value={10}>Skirt</MenuItem>
                        <MenuItem value={20}>Shirt</MenuItem>
                        <MenuItem value={7}>Clothes</MenuItem>
                      </Select>
                    </FormControl>
                  </Grid>
                  <Grid item xs={12} md={6}>
                    <FormControl fullWidth size='small'>
                      <InputLabel id='variants'>Size</InputLabel>
                      <Select
                        labelId='variants'
                        id='variants'
                        multiple
                        value={size}
                        onChange={handleChangeSize}
                        input={<OutlinedInput label='Size' />}
                        renderValue={(selected) => selected.join(', ')}
                        MenuProps={MenuProps}
                      >
                        {names.map((name) => (
                          <MenuItem key={name} value={name}>
                            <Checkbox checked={size.indexOf(name) > -1} />
                            <ListItemText primary={name} />
                          </MenuItem>
                        ))}
                      </Select>
                    </FormControl>
                  </Grid>
                  <Grid item xs={12}>
                    {/* <TextField
                      label='Description'
                      fullWidth
                      id='description'
                      size='small'
                      name='description'
                      value={formik.values.description}
                      onChange={formik.handleChange}
                      error={
                        formik.touched.description &&
                        Boolean(formik.errors.description)
                      }
                      helperText={
                        formik.touched.description && formik.errors.description
                      }
                      FormHelperTextProps={{
                        style: { position: 'absolute', bottom: '-25px' },
                      }}
                    /> */}
                    <Editor
                      apiKey='tod4u05uf72as4w1rg42bpbdrryz3ds79mhj4y9ozgh75hxf'
                      onInit={(evt, editor) => (editorRef.current = editor)}
                      // onChange={() => log()}
                      onEditorChange={(stringifiedHtmlValue) => {
                        formik.setFieldValue(
                          'description',
                          stringifiedHtmlValue
                        );
                      }}
                      init={{
                        height: 300,
                        menubar: false,
                        plugins: [
                          'advlist',
                          'autolink',
                          'lists',
                          'link',
                          'image',
                          'charmap',
                          'preview',
                          'anchor',
                          'searchreplace',
                          'visualblocks',
                          'code',
                          'fullscreen',
                          'insertdatetime',
                          'media',
                          'table',
                          'code',
                          'help',
                          'wordcount',
                        ],
                        toolbar:
                          'undo redo | blocks | ' +
                          'bold italic forecolor | alignleft aligncenter ' +
                          'alignright alignjustify | bullist numlist outdent indent | ' +
                          'removeformat | help',
                        content_style:
                          'body { font-family:Helvetica,Arial,sans-serif; font-size:14px }',
                      }}
                    />
                  </Grid>
                  {/* <Grid item xs={12} md={6}>
                    <ModalImage
                      mainImage={mainImage}
                      setArrayImage={setMainImage}
                    />
                  </Grid> */}
                  <Grid item xs={12} md={6}>
                    <ModalImage setArrayImage={setArrayImage} />
                  </Grid>
                </Grid>
              </Box>
              {arrayImage.length > 0 && (
                <Box
                  sx={{
                    border: '2px solid gray',
                    marginTop: '20px',
                    p: 1,
                    width: 'fit-content',
                  }}
                >
                  <Typography sx={{ fontWeight: 'bold', marginLeft: '10px' }}>
                    Sub Images
                  </Typography>
                  <Box
                    sx={{
                      display: 'flex',
                      gap: '10px',
                    }}
                  >
                    {arrayImage.length > 0 &&
                      arrayImage.map((data, index) => (
                        <figure
                          key={index}
                          style={{ width: '150px', height: '150px', margin: 0 }}
                        >
                          <img
                            src={data}
                            alt='chosen'
                            style={{
                              objectFit: 'contain',
                              width: '100%',
                              height: '100%',
                            }}
                          />
                        </figure>
                      ))}
                  </Box>
                </Box>
              )}
            </form>
          </Paper>
        </Grid>
      </Layout>
    </div>
  );
}
